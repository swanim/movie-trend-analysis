/* 
매일 20:00(KST)에 실행되는 스케줄링 쿼리

s3로 받아오는 csv 파일 8개를 매일 업데이트

- movie_codes
- movie_company
- movie_director
- movie_genre
- movie_grade
- movie_sale
- movie_summary

- prediction_result

*/

-- temp table에 daily update된 파일 copy
COPY raw_data.movie_codes_temp
FROM 's3://your_bucket/your_file.csv'
credentials 'aws_iam_role=your_redshift_arn'
delimiter ',' dateformat 'auto' timeformat 'auto' IGNOREHEADER 1 removequotes;

COPY raw_data.movie_company_temp
FROM 's3://your_bucket/your_file.csv'
credentials 'aws_iam_role=your_redshift_arn'
delimiter ',' dateformat 'auto' timeformat 'auto' IGNOREHEADER 1 removequotes;

COPY raw_data.movie_director_temp
FROM 's3://your_bucket/your_file.csv'
credentials 'aws_iam_role=your_redshift_arn'
delimiter ',' dateformat 'auto' timeformat 'auto' IGNOREHEADER 1 removequotes;

COPY raw_data.movie_genre_temp
FROM 's3://your_bucket/your_file.csv'
credentials 'aws_iam_role=your_redshift_arn'
delimiter ',' dateformat 'auto' timeformat 'auto' IGNOREHEADER 1 removequotes;

COPY raw_data.movie_grade_temp
FROM 's3://your_bucket/your_file.csv'
credentials 'aws_iam_role=your_redshift_arn'
delimiter ',' dateformat 'auto' timeformat 'auto' IGNOREHEADER 1 removequotes;

COPY raw_data.movie_sale_temp
FROM 's3://your_bucket/your_file.csv'
credentials 'aws_iam_role=your_redshift_arn'
delimiter ',' dateformat 'auto' timeformat 'auto' IGNOREHEADER 1 removequotes;

COPY raw_data.movie_summary_temp
FROM 's3://your_bucket/your_file.csv'
credentials 'aws_iam_role=your_redshift_arn'
delimiter ',' dateformat 'auto' timeformat 'auto' IGNOREHEADER 1 removequotes;

COPY adhoc.prediction_result
FROM 's3://your_bucket/your_file.csv'
credentials 'aws_iam_role=your_redshift_arn'
delimiter ',' dateformat 'auto' timeformat 'auto' IGNOREHEADER 1 removequotes;

-- INSERT 
-- 중복값을 제거하기 위해 LEFT JOIN을 사용
INSERT INTO raw_data.movie_codes
SELECT DISTINCT t.*
FROM raw_data.movie_codes_temp t
LEFT JOIN raw_data.movie_codes s ON t.movieCd = s.movieCd
WHERE s.movieCd IS NULL;

INSERT INTO raw_data.movie_company
SELECT DISTINCT t.*
FROM raw_data.movie_company_temp t
LEFT JOIN raw_data.movie_company s ON t.movieCd = s.movieCd
WHERE s.movieCd IS NULL;

INSERT INTO raw_data.movie_director
SELECT DISTINCT t.*
FROM raw_data.movie_director_temp t
LEFT JOIN raw_data.movie_director s ON t.movieCd = s.movieCd
WHERE s.movieCd IS NULL;

INSERT INTO raw_data.movie_genre
SELECT DISTINCT t.*
FROM raw_data.movie_genre_temp t
LEFT JOIN raw_data.movie_genre s ON t.movieCd = s.movieCd
WHERE s.movieCd IS NULL;

INSERT INTO raw_data.movie_grade
SELECT DISTINCT t.*
FROM raw_data.movie_grade_temp t
LEFT JOIN raw_data.movie_grade s ON t.movieCd = s.movieCd
WHERE s.movieCd IS NULL;

-- movie_sale 테이블에는 showingDays 컬럼이 추가되어 있으므로 컬럼 개수를 맞춰주기

-- 컬럼 추가
ALTER TABLE raw_data.movie_sale_temp
ADD COLUMN showingDays FLOAT;

-- showingDays 값 처리
BEGIN;

UPDATE raw_data.movie_sale_temp
SET showingDays = DATEDIFF('day', openDt, date) + 1
WHERE DATEDIFF('day', openDt, date) > 0;

DELETE FROM raw_data.movie_sale_temp
WHERE DATEDIFF('day', openDt, date) <= 0 OR showingDays IS NULL;

COMMIT;

-- temp 값을 sale과 LEFT JOIN 해서 중복값 제거
INSERT INTO raw_data.movie_sale
SELECT DISTINCT t.*
FROM raw_data.movie_sale_temp t
LEFT JOIN raw_data.movie_sale s ON t.movieCd = s.movieCd AND t.date = s.date
WHERE s.movieCd IS NULL AND s.date IS NULL;

-- temp 컬럼 삭제
ALTER TABLE raw_data.movie_sale_temp
DROP COLUMN showingDays;


INSERT INTO raw_data.movie_summary
SELECT DISTINCT t.*
FROM raw_data.movie_summary_temp t
LEFT JOIN raw_data.movie_summary s ON t.movieCd = s.movieCd
WHERE s.movieCd IS NULL;